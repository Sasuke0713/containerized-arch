name: Dockerfile CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image only on pull request
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v2
      with:
        push: false
        tags: goku0713/ubuntu2204python:${{ github.sha }}
        file: ./Dockerfile

    - name: Build and push Docker image
      if: github.event_name == 'push'
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: goku0713/ubuntu2204python:${{ github.sha }}
        file: ./Dockerfile

    - name: Install Trivy
      if: github.event_name == 'push'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
  
    - name: Scan Docker image with Trivy
      if: github.event_name == 'push'
      run: trivy image goku0713/ubuntu2204python:${{ github.sha }}

    - name: Set up kind cluster
      if: github.event_name == 'push'
      uses: engineerd/setup-kind@v0.6.2
      with:
        version: v0.27.0

    - name: Set up kubectl
      if: github.event_name == 'push'
      uses: azure/setup-kubectl@v4
      id: install

    - name: Create deployment.yaml
      if: github.event_name == 'push'
      run: |
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: pythonapp
          labels:
            app: pythonapp
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: pythonapp
          template:
            metadata:
              labels:
                app: pythonapp
            spec:
              containers:
              - name: myapp
                image: goku0713/ubuntu2204python:${{ github.sha }}
                ports:
                - containerPort: 8080
        EOF

    - name: Deploy Built Image to k8s
      if: github.event_name == 'push'
      run: |
        kubectl apply -f deployment.yaml
        
        # expose the deployed resource to the internet
        kubectl expose deployment pythonapp --type=LoadBalancer --port=80 --target-port=8080
